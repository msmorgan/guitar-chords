{"version":3,"sources":["chordData.ts","utilities.ts","ChordDiagram.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NoteType","typeFromShorthand","shorthand","REQUIRED","OPTIONAL","SPECIAL","AFTER1","AFTER2","toLowerCase","chords","map","split","name","chord","notes","string","inString","note","length","type","substring","fret","Number","push","range","lo","hi","step","result","TextFormat","noteTypeClass","getFormat","symbol","STRIKETHROUGH","SUPERSCRIPT","SUBSCRIPT","renderNamePart","part","index","format","DEFAULT","key","text","ChordName","parts","thisFormat","thisText","emit","nextFormat","pos","Error","intoParts","className","ChordDiagram","lowestFret","Math","max","n","reduce","a","b","min","Infinity","i","column","columnOffset","row","rowOffset","join","style","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6NAAYA,E,8EAAAA,O,uBAAAA,I,uBAAAA,I,qBAAAA,I,mBAAAA,I,oBAAAA,M,KAwJZ,SAASC,EAAkBC,GAQzB,MAP6C,CAC3C,EAAKF,EAASG,SACd,EAAKH,EAASI,SACd,EAAKJ,EAASK,QACd,EAAKL,EAASM,OACd,EAAKN,EAASO,QAEDL,EAAUM,eAiDpB,IAAMC,EA9LqB,CAChC,yBACA,yBACA,sBACA,gCACA,sBACA,sBACA,kBACA,sBACA,4BACA,uBACA,4BACA,sBACA,uBACA,uBACA,yBACA,2BACA,sBACA,6BACA,iCACA,0BACA,kBACA,uBACA,uBACA,0BACA,uBACA,yBACA,2BAEA,0BACA,uBACA,uBACA,uBACA,uBACA,mBACA,0BACA,6BACA,0BACA,0BACA,0BACA,uBACA,uBACA,wBACA,wBACA,wBACA,4BACA,8BACA,qBACA,gCACA,4BACA,gCACA,4BACA,4BACA,sBACA,uBACA,6BACA,6BACA,iCACA,iCACA,0BAEA,gCACA,yBACA,wBACA,2BACA,8BACA,wBACA,8BACA,oBAEA,2BACA,6BACA,qBACA,qBACA,6BACA,6BACA,0BACA,yBACA,uBACA,6BACA,6BACA,iCACA,qBACA,mBACA,6BACA,uBACA,0BACA,yBACA,mCAEA,8BACA,wCACA,4BACA,+BACA,yBACA,0BACA,yBACA,yBACA,uBACA,4BACA,mCACA,yBACA,yBACA,4BACA,4BAEA,uBACA,uBACA,4BACA,uBACA,+BACA,uBACA,6BACA,kCACA,yBACA,8CAEA,0BAEA,2CACA,oCACA,uCAEA,4BAEA,yBAEA,8BACA,yBACA,+BACA,4BA4D6CC,KA9C/C,SAA4BR,GAA2B,IAAD,EAC9BA,EAAUS,MAAM,KADc,mBAC7CC,EAD6C,KACvCC,EADuC,KAE9CC,EAAQ,GAEVC,EAAS,EAJuC,uBAKpD,YAAuBF,EAAMF,MAAM,KAAnC,+CAAyC,CAAC,IAA/BK,EAA8B,+BACvC,YAAmBA,EAASL,MAAM,KAAlC,+CAAwC,CAAC,IAA9BM,EAA6B,QACtC,GAAoB,IAAhBA,EAAKC,OAAT,CAGA,IAAMC,EA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","file":"static/js/main.a0a7b6c9.chunk.js","sourcesContent":["export enum NoteType {\n  REQUIRED,\n  OPTIONAL,\n  SPECIAL,\n  AFTER1,\n  AFTER2,\n}\n\nexport interface Note {\n  string: number,\n  fret: number,\n  type: NoteType,\n}\n\nexport interface Chord {\n  name: string,\n  notes: Note[],\n}\n\nconst shorthandChords: string[] = [\n  'A:r5|r4|r2|o2|o2,o5|o5',\n  'A:o5|r4|r2|r2|o2,o5|o5',\n  'A:o5|o4|r2|r2|r2|o5',\n  'A:o12|o12|r14|r14|r14|o12,o17',\n  'A:o5|r4|o2|r2|r5|o5',\n  'A:r5|o4|r2|o2|r2|o5',\n  'A:r5|o4|r2|r6||',\n  'A:r5|r7|o7|r6|o5|o5',\n  'A:o12|r12|r14|o14|r14|o12',\n  'A:o9|o7|r7|r9|o10|r9',\n  'A:o12|o12|o14|r14|r14|r12',\n  'A:o5|o7|o7|r6|r5|r5',\n  'A:o5|o7|r7|r6|r5,o5|',\n  'A:o5|r7|o7|r6|o5,r5|',\n  'A:r12|o12|r11||r10|o12',\n  'A:r12|r12|r11|o9|o10|o12',\n  'A:o5|r7|r7|r6|o5|o5',\n  'A:o12,o9|o12|o11|r9|r10|r9',\n  'A:o12,o9|o12|r11|r9|r10|o9,o12',\n  'A:r9|o12|o11|r9|r10|o12',\n  'A:|r4||o6|r5|r5',\n  'A:r9|o7|r7|r9|o10|o9',\n  'A:r9|r7|r7|o9|o10|o9',\n  'A:o12|r12|r11|r9|o10|o9',\n  'A:|r12|o11|r9|o10|r9',\n  'A:r12|o12|r11|r14|o14|',\n  'A:o12|o12|r11|o9|r10|r12',\n\n  'Am:r5|r3|r2|o2,o5|o5|o5',\n  'Am:o5|r3|r2|r2|o5|o5',\n  'Am:r5|o3|r2|r5|o5|o5',\n  'Am:o5|r3|o2|r2|r5|o5',\n  'Am:o5|o3|r2|r5|o5|r5',\n  'Am:|r3||o5|r5|r5',\n  'Am:o5,o8|r7|r7|r5|o5|o5',\n  'Am:o5,o8|o7|r7|r5|r5|o5,o8',\n  'Am:o5,o8|o7|o7|r5|r5|r5',\n  'Am:r5|r7|o7|r5|o5|o5,o8',\n  'Am:o5,o8|o7|r7|o5|r5|r8',\n  'Am:o5|r7|o7|r5|o5|r5',\n  'Am:r8|o7|r7|o5|r5|o8',\n  'Am:r8|r7|r7|o9|o10|o8',\n  'Am:o8|o7|r7|r9|o10|r8',\n  'Am:r8|o7|r7|r9|o10|o8',\n  'Am:o8|o7|o7,o10|r9|r10|r8',\n  'Am:r8|o12|o10|r9|r10|o8,o12',\n  'Am:|r7|r10|o9|r10|',\n  'Am:o12|r12|r10|r9|o10,o13|o12',\n  'Am:o12|o12|r10|r9|r10|o12',\n  'Am:r12|r12|r10|o9|o10,o13|o12',\n  'Am:r12|o12|r10|o9|r10|o12',\n  'Am:o12|o12|r10|o9|r10|r12',\n  'Am:|r12|o10|r9|r13|',\n  'Am:r12|o12|r10|r14||',\n  'Am:r12|r15|o14|r14|o13|o12',\n  'Am:o12|r12|r14|o14|r13|o12',\n  'Am:o12|o12,o15|o14|r14|r13|r12',\n  'Am:o12|o12,o15|r14|r14|r13|o12',\n  'Am:o12|r15||r14|o13|r12',\n\n  'A/9:o12|r12|r11|r9|r12|o9,o12',\n  'A/9:r9|o7|r7|r9|o10|r7',\n  'A/9:r5|r7|r9|r6|o5|o5',\n  'A/9:|r12|o14|r16|r14|r12',\n  'A/9:o12|r16|r14|r14|r12|o12',\n  'A/9:o5|r4|o7|r4|r5|o7',\n  'A/9(6):r5|o4|r2|r4|r2|s2,o5',\n  'A/9:|r4|r7||r5|r7',\n\n  'A6(9):r5|r7||r6|r7|o5,s7',\n  'A6(9):o5|r7|o7|r6|r7|r5,s7',\n  'A6:r5||r4|r6|r5|o5',\n  'A6:r9||r7|r9|r7|o9',\n  'A6:r12|o12|r11|r11|r10|o12',\n  'A6:o12|r12|o14|r14|r14|r14',\n  'A6:o5|o4|r2,o4|r2|r2|r2',\n  'A6(9):||r4|r6|r5|r5,s7',\n  'A6:o9|o7|r7|r9|r7|r9',\n  'A6:o12|o12|r11|r11|r10|r12',\n  'A6:r12|r12|o11|r11|r14|o14',\n  'A6:r12|r12|r11|r11|o14|o12,o14',\n  'A6:|r7|r7|r6|r7|o9',\n  'A6:r5|r7|r4|r6||',\n  'A6:o17|r19|r16|r14|r14|o14',\n  'A6:o5|r9|r7|r6|r5|o5',\n  'A6(9):|r12|r11|r9|r7|s7',\n  'A6/9:o5|r4|r4|r4|r5|r5',\n  'A6/9:o12|o12|r11|r11|r12|r12,o14',\n\n  'A~7~(~9~):r5|o7|r6|r6|o5|s7',\n  'A~7~(~9~):r12|r12|r11|r13|s12,o14|o12',\n  'A~7~:|r12|r14|r13|r14|o12',\n  'A~7~(~9~):|r7|r7|r6|r9|s7,o9',\n  'A~7~:o9|o7|r7|r9|r9|r9',\n  'A~7~:|o4|r2|r2|r2,o5|r4',\n  'A~7~:||r11|r13|r10|r12',\n  'A~7~:|r16|r18|r14|r17|',\n  'A~7~:r5|r7||r6|r9|o9',\n  'A~7~:|r12|r14|o14|r14|r16',\n  'A~7~:o9,o12|r12|r11|r9|r9|o9,o12',\n  'A~7~:r9|o7|r7|r9|r9|o9',\n  'A~7~:|r19|r18|r14|r14|',\n  'A~7~:o5|o4,o7|r7|r6|r5|r4',\n  'A~7~:r5|o7|o6,o7|r6|r5|r4',\n\n  'A~9~:o9||r7|r9|r9|r7',\n  'A~9~:r5||r6|r6|r5|r7',\n  'A~9~:r17|r16|r18|r16|r17|',\n  'A~9~:|o7|r7|r6|r9|r7',\n  'A~9~:o12|r12|r11|r13|r12|o12',\n  'A~9~:r5||r9|r9|r9|r9',\n  'A~9~(~13~):r5||r6|r4|r2|s2',\n  'A~9~:o9,o12|r12|r9|r9|r9|o9,o12',\n  'A~9~:o5|r4|r7|r4|r5|r4',\n  'A~9~(~13~):|r12,o16|r14|r13|r12|o12,s14,o16',\n\n  'A~13~:r5|r4|r4|r4|r5|r4',\n\n  'A6/9+11(~7~):o12|r12|r11|r11,s13|r12|r11',\n  'A6/9+11(~7~):r5|r7|r4,s6|r4|r4|s4',\n  'A6/9+11(~7~):r12|r12|r16|r16|r16|s16',\n\n  'A~7~+11:o5|r7|r7|r6|r4|r4',\n\n  'Am/9:r5|r7|r9|r5|o5|o5',\n\n  'Am7:r5|o7|r5|r5|r5,o8|o5,o8',\n  'Am7:r5|r7||r5|r8|o5,o8',\n  'Am7:|r12|r14|r12|r13|o12,o15',\n  'Am7:|r12|o10|r12|r13|r12',\n];\n\nfunction typeFromShorthand(shorthand: string): NoteType | undefined {\n  const typeMap: { [key: string]: NoteType } = {\n    'r': NoteType.REQUIRED,\n    'o': NoteType.OPTIONAL,\n    's': NoteType.SPECIAL,\n    'a': NoteType.AFTER1,\n    'b': NoteType.AFTER2,\n  };\n  return typeMap[shorthand.toLowerCase()];\n}\n\nfunction chordFromShorthand(shorthand: string): Chord {\n  const [name, chord] = shorthand.split(':');\n  const notes = [];\n\n  let string = 6;\n  for (const inString of chord.split('|')) {\n    for (const note of inString.split(',')) {\n      if (note.length === 0) {\n        continue;\n      }\n      const type = typeFromShorthand(note.substring(0, 1)) || NoteType.REQUIRED;\n      const fret = Number(note.substring(1));\n      notes.push({type, string, fret});\n    }\n    string -= 1;\n  }\n  return {name, notes};\n}\n\nfunction typeToShorthand(type: NoteType): string {\n  return {\n    [NoteType.REQUIRED]: 'r',\n    [NoteType.OPTIONAL]: 'o',\n    [NoteType.SPECIAL]: 's',\n    [NoteType.AFTER1]: 'a',\n    [NoteType.AFTER2]: 'b',\n  }[type];\n}\n\nfunction chordToShorthand(chord: Chord): string {\n  const perString: { [string: number]: Note[] } = {};\n  for (const note of chord.notes) {\n    perString[note.string] = perString[note.string] || [];\n    perString[note.string].push(note);\n  }\n\n  let strings = [];\n  for (let string = 6; string > 0; string--) {\n    const thisString = perString[string] || [];\n    strings.push(thisString.map((note: Note) =>\n        `${typeToShorthand(note.type)}${note.fret}`));\n  }\n\n  return `${chord.name}:${strings.map(s => s.join(',')).join('|')}`;\n}\n\nexport const chords: Chord[] = shorthandChords.map(chordFromShorthand);\n","export function range(to: number): number[];\nexport function range(from: number, to: number): number[];\nexport function range(from: number, to: number, step: number): number[];\nexport function range(lo: number, hi?: number, step?: number): number[] {\n  if (hi == null) {\n    hi = lo;\n    lo = 0;\n  }\n  if (step == null || step <= 0) {\n    step = 1;\n  }\n\n  const result = [];\n  while (lo < hi) {\n    result.push(lo);\n    lo += step;\n  }\n  return result;\n}","import React, {ReactElement} from 'react';\nimport './ChordDiagram.scss';\nimport {Chord, Note, NoteType} from './chordData';\nimport {range} from './utilities';\n\nconst stringCount = 6;\nconst fretCount = 7;\nconst columnOffset = 1;\nconst rowOffset = 1;\n\nfunction noteTypeClass(type: NoteType): string {\n  return {\n    [NoteType.REQUIRED]: 'required',\n    [NoteType.OPTIONAL]: 'optional',\n    [NoteType.SPECIAL]: 'special',\n    [NoteType.AFTER1]: 'after1',\n    [NoteType.AFTER2]: 'after2',\n  }[type];\n}\n\nenum TextFormat {\n  DEFAULT,\n  STRIKETHROUGH,\n  SUPERSCRIPT,\n  SUBSCRIPT,\n}\n\ninterface NamePart {\n  text: string,\n  format: TextFormat,\n}\n\nfunction getFormat(symbol: string): TextFormat | undefined {\n  switch (symbol) {\n    case '~': return TextFormat.STRIKETHROUGH;\n    case '^': return TextFormat.SUPERSCRIPT;\n    case '_': return TextFormat.SUBSCRIPT;\n  }\n}\n\nfunction intoParts(name: string): NamePart[] {\n  const result: NamePart[] = [];\n  let thisFormat = TextFormat.DEFAULT;\n  let thisText = '';\n  const emit = (nextFormat: TextFormat) => {\n    result.push({text: thisText, format: thisFormat});\n    thisText = '';\n    thisFormat = nextFormat;\n  };\n  let pos = 0;\n  while (pos < name.length) {\n    const nextFormat = getFormat(name[pos]);\n    if (nextFormat == null) {\n      thisText += name[pos];\n    } else {\n      if (thisFormat === TextFormat.DEFAULT) {\n        emit(nextFormat);\n      } else if (nextFormat === thisFormat) {\n        emit(TextFormat.DEFAULT);\n      } else {\n        throw new Error('Unmatched format specifiers (cannot be nested).');\n      }\n    }\n    pos += 1;\n  }\n  if (thisText != null) {\n    emit(TextFormat.DEFAULT);\n  }\n  return result;\n}\n\nfunction renderNamePart(part: NamePart, index?: number): ReactElement {\n  switch (part.format) {\n    case TextFormat.DEFAULT:\n      return <span key={index}>{part.text}</span>;\n    case TextFormat.STRIKETHROUGH:\n      return <s key={index}>{part.text}</s>;\n    case TextFormat.SUPERSCRIPT:\n      return <sup key={index}>{part.text}</sup>;\n    case TextFormat.SUBSCRIPT:\n      return <sub key={index}>{part.text}</sub>;\n  }\n}\n\nconst ChordName: React.FC<{name: string}> = ({name}) => {\n  const parts = intoParts(name);\n  return (\n      <div className=\"ChordDiagram-name\">\n        {parts.map(renderNamePart)}\n      </div>\n  );\n};\n\nconst ChordDiagram: React.FC<{ chord: Chord }> = ({chord: {name, notes}}) => {\n  const lowestFret = Math.max(1,\n      notes.map(n => n.fret).reduce((a, b) => Math.min(a, b), Infinity));\n\n  const renderNote = (note: Note, index?: number): ReactElement => {\n    const column = columnOffset + stringCount + 1 - note.string;\n    const row = rowOffset + 1 + note.fret - lowestFret;\n    return (\n        <div\n            className={[\n              'ChordDiagram-note',\n              `ChordDiagram-note-${noteTypeClass(note.type)}`,\n            ].join(' ')}\n            style={{'gridArea': `${row} / ${column}`}}\n            key={index}\n        />\n    );\n  };\n\n  return (\n      <div className=\"ChordDiagram\">\n        <ChordName name={name}/>\n        <div className=\"ChordDiagram-layers\">\n          <div className=\"ChordDiagram-stringsLayer\">\n            <div className=\"ChordDiagram-noString\"/>\n            {range(stringCount).map((i) =>\n                <div className=\"ChordDiagram-string\" key={i}/>)}\n          </div>\n          <div className=\"ChordDiagram-fretsLayer\">\n            <div className=\"ChordDiagram-fretIndicator\">{lowestFret}</div>\n            {range(fretCount).map((i) =>\n                <div className=\"ChordDiagram-fret\" key={i}/>)}\n          </div>\n          <div className=\"ChordDiagram-notesLayer\">\n            {notes.map(renderNote)}\n          </div>\n        </div>\n      </div>\n  );\n};\n\nexport default ChordDiagram;\n","import React from 'react';\nimport './App.scss';\nimport ChordDiagram from './ChordDiagram';\nimport {chords} from './chordData';\n\nconst App: React.FC = () => {\n  return (\n      <div className=\"App\">\n        <div className=\"App-chords\">\n          {chords.map((chord, i) => <ChordDiagram chord={chord} key={i}/>)}\n        </div>\n      </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}